# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DsoConfigSO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DsoConfigSO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'openstack_end_point': 'str',
            'openstack_key_stone_end_point': 'str',
            'sa_end_point': 'str',
            'dso_end_point': 'str',
            'dns': 'str',
            'available_public_ips': 'list[PublicIpInfoSO]'
        }

        self.attribute_map = {
            'openstack_end_point': 'openstackEndPoint',
            'openstack_key_stone_end_point': 'openstackKeyStoneEndPoint',
            'sa_end_point': 'saEndPoint',
            'dso_end_point': 'dsoEndPoint',
            'dns': 'dns',
            'available_public_ips': 'availablePublicIps'
        }

        self._openstack_end_point = None
        self._openstack_key_stone_end_point = None
        self._sa_end_point = None
        self._dso_end_point = None
        self._dns = None
        self._available_public_ips = None

    @property
    def openstack_end_point(self):
        """
        Gets the openstack_end_point of this DsoConfigSO.


        :return: The openstack_end_point of this DsoConfigSO.
        :rtype: str
        """
        return self._openstack_end_point

    @openstack_end_point.setter
    def openstack_end_point(self, openstack_end_point):
        """
        Sets the openstack_end_point of this DsoConfigSO.


        :param openstack_end_point: The openstack_end_point of this DsoConfigSO.
        :type: str
        """
        self._openstack_end_point = openstack_end_point

    @property
    def openstack_key_stone_end_point(self):
        """
        Gets the openstack_key_stone_end_point of this DsoConfigSO.


        :return: The openstack_key_stone_end_point of this DsoConfigSO.
        :rtype: str
        """
        return self._openstack_key_stone_end_point

    @openstack_key_stone_end_point.setter
    def openstack_key_stone_end_point(self, openstack_key_stone_end_point):
        """
        Sets the openstack_key_stone_end_point of this DsoConfigSO.


        :param openstack_key_stone_end_point: The openstack_key_stone_end_point of this DsoConfigSO.
        :type: str
        """
        self._openstack_key_stone_end_point = openstack_key_stone_end_point

    @property
    def sa_end_point(self):
        """
        Gets the sa_end_point of this DsoConfigSO.


        :return: The sa_end_point of this DsoConfigSO.
        :rtype: str
        """
        return self._sa_end_point

    @sa_end_point.setter
    def sa_end_point(self, sa_end_point):
        """
        Sets the sa_end_point of this DsoConfigSO.


        :param sa_end_point: The sa_end_point of this DsoConfigSO.
        :type: str
        """
        self._sa_end_point = sa_end_point

    @property
    def dso_end_point(self):
        """
        Gets the dso_end_point of this DsoConfigSO.


        :return: The dso_end_point of this DsoConfigSO.
        :rtype: str
        """
        return self._dso_end_point

    @dso_end_point.setter
    def dso_end_point(self, dso_end_point):
        """
        Sets the dso_end_point of this DsoConfigSO.


        :param dso_end_point: The dso_end_point of this DsoConfigSO.
        :type: str
        """
        self._dso_end_point = dso_end_point

    @property
    def dns(self):
        """
        Gets the dns of this DsoConfigSO.


        :return: The dns of this DsoConfigSO.
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """
        Sets the dns of this DsoConfigSO.


        :param dns: The dns of this DsoConfigSO.
        :type: str
        """
        self._dns = dns

    @property
    def available_public_ips(self):
        """
        Gets the available_public_ips of this DsoConfigSO.


        :return: The available_public_ips of this DsoConfigSO.
        :rtype: list[PublicIpInfoSO]
        """
        return self._available_public_ips

    @available_public_ips.setter
    def available_public_ips(self, available_public_ips):
        """
        Sets the available_public_ips of this DsoConfigSO.


        :param available_public_ips: The available_public_ips of this DsoConfigSO.
        :type: list[PublicIpInfoSO]
        """
        self._available_public_ips = available_public_ips

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

