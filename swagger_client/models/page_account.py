# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PageAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PageAccount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'page': 'int',
            'records': 'int',
            'results': 'Accounts',
            'rows': 'int',
            'total': 'int'
        }

        self.attribute_map = {
            'page': 'page',
            'records': 'records',
            'results': 'results',
            'rows': 'rows',
            'total': 'total'
        }

        self._page = None
        self._records = None
        self._results = None
        self._rows = None
        self._total = None

    @property
    def page(self):
        """
        Gets the page of this PageAccount.


        :return: The page of this PageAccount.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this PageAccount.


        :param page: The page of this PageAccount.
        :type: int
        """
        self._page = page

    @property
    def records(self):
        """
        Gets the records of this PageAccount.


        :return: The records of this PageAccount.
        :rtype: int
        """
        return self._records

    @records.setter
    def records(self, records):
        """
        Sets the records of this PageAccount.


        :param records: The records of this PageAccount.
        :type: int
        """
        self._records = records

    @property
    def results(self):
        """
        Gets the results of this PageAccount.


        :return: The results of this PageAccount.
        :rtype: Accounts
        """
        return self._results

    @results.setter
    def results(self, results):
        """
        Sets the results of this PageAccount.


        :param results: The results of this PageAccount.
        :type: Accounts
        """
        self._results = results

    @property
    def rows(self):
        """
        Gets the rows of this PageAccount.


        :return: The rows of this PageAccount.
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """
        Sets the rows of this PageAccount.


        :param rows: The rows of this PageAccount.
        :type: int
        """
        self._rows = rows

    @property
    def total(self):
        """
        Gets the total of this PageAccount.


        :return: The total of this PageAccount.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this PageAccount.


        :param total: The total of this PageAccount.
        :type: int
        """
        self._total = total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

