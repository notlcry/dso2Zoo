# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ServicesSO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ServicesSO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'servicename': 'str',
            'description': 'str',
            'instances': 'list[InstanceSO]'
        }

        self.attribute_map = {
            'id': 'id',
            'servicename': 'servicename',
            'description': 'description',
            'instances': 'instances'
        }

        self._id = None
        self._servicename = None
        self._description = None
        self._instances = None

    @property
    def id(self):
        """
        Gets the id of this ServicesSO.


        :return: The id of this ServicesSO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ServicesSO.


        :param id: The id of this ServicesSO.
        :type: str
        """
        self._id = id

    @property
    def servicename(self):
        """
        Gets the servicename of this ServicesSO.


        :return: The servicename of this ServicesSO.
        :rtype: str
        """
        return self._servicename

    @servicename.setter
    def servicename(self, servicename):
        """
        Sets the servicename of this ServicesSO.


        :param servicename: The servicename of this ServicesSO.
        :type: str
        """
        self._servicename = servicename

    @property
    def description(self):
        """
        Gets the description of this ServicesSO.


        :return: The description of this ServicesSO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ServicesSO.


        :param description: The description of this ServicesSO.
        :type: str
        """
        self._description = description

    @property
    def instances(self):
        """
        Gets the instances of this ServicesSO.


        :return: The instances of this ServicesSO.
        :rtype: list[InstanceSO]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """
        Sets the instances of this ServicesSO.


        :param instances: The instances of this ServicesSO.
        :type: list[InstanceSO]
        """
        self._instances = instances

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

