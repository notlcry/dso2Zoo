# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class InstanceSO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        InstanceSO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'mac': 'str',
            'manageip': 'str',
            'publicip': 'str',
            'publicgateway': 'str',
            'publicnetmask': 'str',
            'serviceip': 'str',
            'status': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'mac': 'mac',
            'manageip': 'manageip',
            'publicip': 'publicip',
            'publicgateway': 'publicgateway',
            'publicnetmask': 'publicnetmask',
            'serviceip': 'serviceip',
            'status': 'status'
        }

        self._id = None
        self._mac = None
        self._manageip = None
        self._publicip = None
        self._publicgateway = None
        self._publicnetmask = None
        self._serviceip = None
        self._status = None

    @property
    def id(self):
        """
        Gets the id of this InstanceSO.


        :return: The id of this InstanceSO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InstanceSO.


        :param id: The id of this InstanceSO.
        :type: str
        """
        self._id = id

    @property
    def mac(self):
        """
        Gets the mac of this InstanceSO.


        :return: The mac of this InstanceSO.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """
        Sets the mac of this InstanceSO.


        :param mac: The mac of this InstanceSO.
        :type: str
        """
        self._mac = mac

    @property
    def manageip(self):
        """
        Gets the manageip of this InstanceSO.


        :return: The manageip of this InstanceSO.
        :rtype: str
        """
        return self._manageip

    @manageip.setter
    def manageip(self, manageip):
        """
        Sets the manageip of this InstanceSO.


        :param manageip: The manageip of this InstanceSO.
        :type: str
        """
        self._manageip = manageip

    @property
    def publicip(self):
        """
        Gets the publicip of this InstanceSO.


        :return: The publicip of this InstanceSO.
        :rtype: str
        """
        return self._publicip

    @publicip.setter
    def publicip(self, publicip):
        """
        Sets the publicip of this InstanceSO.


        :param publicip: The publicip of this InstanceSO.
        :type: str
        """
        self._publicip = publicip

    @property
    def publicgateway(self):
        """
        Gets the publicgateway of this InstanceSO.


        :return: The publicgateway of this InstanceSO.
        :rtype: str
        """
        return self._publicgateway

    @publicgateway.setter
    def publicgateway(self, publicgateway):
        """
        Sets the publicgateway of this InstanceSO.


        :param publicgateway: The publicgateway of this InstanceSO.
        :type: str
        """
        self._publicgateway = publicgateway

    @property
    def publicnetmask(self):
        """
        Gets the publicnetmask of this InstanceSO.


        :return: The publicnetmask of this InstanceSO.
        :rtype: str
        """
        return self._publicnetmask

    @publicnetmask.setter
    def publicnetmask(self, publicnetmask):
        """
        Sets the publicnetmask of this InstanceSO.


        :param publicnetmask: The publicnetmask of this InstanceSO.
        :type: str
        """
        self._publicnetmask = publicnetmask

    @property
    def serviceip(self):
        """
        Gets the serviceip of this InstanceSO.


        :return: The serviceip of this InstanceSO.
        :rtype: str
        """
        return self._serviceip

    @serviceip.setter
    def serviceip(self, serviceip):
        """
        Sets the serviceip of this InstanceSO.


        :param serviceip: The serviceip of this InstanceSO.
        :type: str
        """
        self._serviceip = serviceip

    @property
    def status(self):
        """
        Gets the status of this InstanceSO.


        :return: The status of this InstanceSO.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InstanceSO.


        :param status: The status of this InstanceSO.
        :type: str
        """
        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

