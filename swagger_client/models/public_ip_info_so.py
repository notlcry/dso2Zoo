# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PublicIpInfoSO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PublicIpInfoSO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ip_start': 'str',
            'ip_end': 'str',
            'netmask': 'str',
            'gate_way': 'str'
        }

        self.attribute_map = {
            'ip_start': 'ipStart',
            'ip_end': 'ipEnd',
            'netmask': 'netmask',
            'gate_way': 'gateWay'
        }

        self._ip_start = None
        self._ip_end = None
        self._netmask = None
        self._gate_way = None

    @property
    def ip_start(self):
        """
        Gets the ip_start of this PublicIpInfoSO.


        :return: The ip_start of this PublicIpInfoSO.
        :rtype: str
        """
        return self._ip_start

    @ip_start.setter
    def ip_start(self, ip_start):
        """
        Sets the ip_start of this PublicIpInfoSO.


        :param ip_start: The ip_start of this PublicIpInfoSO.
        :type: str
        """
        self._ip_start = ip_start

    @property
    def ip_end(self):
        """
        Gets the ip_end of this PublicIpInfoSO.


        :return: The ip_end of this PublicIpInfoSO.
        :rtype: str
        """
        return self._ip_end

    @ip_end.setter
    def ip_end(self, ip_end):
        """
        Sets the ip_end of this PublicIpInfoSO.


        :param ip_end: The ip_end of this PublicIpInfoSO.
        :type: str
        """
        self._ip_end = ip_end

    @property
    def netmask(self):
        """
        Gets the netmask of this PublicIpInfoSO.


        :return: The netmask of this PublicIpInfoSO.
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """
        Sets the netmask of this PublicIpInfoSO.


        :param netmask: The netmask of this PublicIpInfoSO.
        :type: str
        """
        self._netmask = netmask

    @property
    def gate_way(self):
        """
        Gets the gate_way of this PublicIpInfoSO.


        :return: The gate_way of this PublicIpInfoSO.
        :rtype: str
        """
        return self._gate_way

    @gate_way.setter
    def gate_way(self, gate_way):
        """
        Sets the gate_way of this PublicIpInfoSO.


        :param gate_way: The gate_way of this PublicIpInfoSO.
        :type: str
        """
        self._gate_way = gate_way

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

