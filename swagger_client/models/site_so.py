# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SiteSO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SiteSO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'sitename': 'str',
            'description': 'str',
            'type': 'str',
            'cpes': 'list[CpeSO]'
        }

        self.attribute_map = {
            'id': 'id',
            'sitename': 'sitename',
            'description': 'description',
            'type': 'type',
            'cpes': 'cpes'
        }

        self._id = None
        self._sitename = None
        self._description = None
        self._type = None
        self._cpes = None

    @property
    def id(self):
        """
        Gets the id of this SiteSO.


        :return: The id of this SiteSO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SiteSO.


        :param id: The id of this SiteSO.
        :type: str
        """
        self._id = id

    @property
    def sitename(self):
        """
        Gets the sitename of this SiteSO.


        :return: The sitename of this SiteSO.
        :rtype: str
        """
        return self._sitename

    @sitename.setter
    def sitename(self, sitename):
        """
        Sets the sitename of this SiteSO.


        :param sitename: The sitename of this SiteSO.
        :type: str
        """
        self._sitename = sitename

    @property
    def description(self):
        """
        Gets the description of this SiteSO.


        :return: The description of this SiteSO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SiteSO.


        :param description: The description of this SiteSO.
        :type: str
        """
        self._description = description

    @property
    def type(self):
        """
        Gets the type of this SiteSO.


        :return: The type of this SiteSO.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SiteSO.


        :param type: The type of this SiteSO.
        :type: str
        """
        self._type = type

    @property
    def cpes(self):
        """
        Gets the cpes of this SiteSO.


        :return: The cpes of this SiteSO.
        :rtype: list[CpeSO]
        """
        return self._cpes

    @cpes.setter
    def cpes(self, cpes):
        """
        Sets the cpes of this SiteSO.


        :param cpes: The cpes of this SiteSO.
        :type: list[CpeSO]
        """
        self._cpes = cpes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

